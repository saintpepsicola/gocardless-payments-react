{"ast":null,"code":"import _objectSpread from \"/home/shiv/healthera-portal/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// Initial State\nvar initialState = {\n  repos: [],\n  isFetching: false,\n  appTitle: '',\n  readme: '',\n  error: null // Action constants\n\n};\nvar GET_USER_REPOS = 'GET_USER_REPOS';\nvar GET_USER_REPOS_SUCCESS = 'GET_USER_REPOS_SUCCESS';\nvar GET_USER_REPOS_FAILURE = 'GET_USER_REPOS_FAILURE';\nvar SELECT_PROJECT = 'SELECT_PROJECT';\nvar GET_REPO_README = 'GET_REPO_README';\nvar GET_REPO_README_SUCCESS = 'GET_REPO_README_SUCCESS';\nvar GET_REPO_README_FAILURE = 'GET_REPO_README_FAILURE'; // Action creators\n\nexport var requestUserRepos = function requestUserRepos(user) {\n  return {\n    types: [GET_USER_REPOS, GET_USER_REPOS_SUCCESS, GET_USER_REPOS_FAILURE],\n    payload: {\n      request: {\n        url: \"/users/\".concat(user, \"/repos\")\n      }\n    }\n  };\n};\nexport var selectProject = function selectProject(project) {\n  return {\n    type: SELECT_PROJECT,\n    payload: project\n  };\n};\nexport var requestReadme = function requestReadme(user, project) {\n  return {\n    types: [GET_REPO_README, GET_REPO_README_SUCCESS, GET_REPO_README_FAILURE],\n    payload: {\n      request: {\n        url: \"/repos/\".concat(user, \"/\").concat(project, \"/readme\"),\n        // Get README as HTML\n        headers: {\n          'Accept': 'application/vnd.github.VERSION.html'\n        }\n      }\n    }\n  };\n}; // Reducer\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_USER_REPOS:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        repos: [],\n        error: null\n      });\n\n    case GET_USER_REPOS_SUCCESS:\n      return _objectSpread({}, state, {\n        repos: action.payload.data,\n        appTitle: action.payload.data[0] ? \"\".concat(action.payload.data[0].owner.login, \"'s projects\") : null,\n        isFetching: false\n      });\n\n    case GET_USER_REPOS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.error.response.statusText,\n        isFetching: false\n      });\n\n    case SELECT_PROJECT:\n      return _objectSpread({}, state, {\n        appTitle: action.payload\n      });\n\n    case GET_REPO_README:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        readme: '',\n        error: null\n      });\n\n    case GET_REPO_README_SUCCESS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        readme: action.payload.data\n      });\n\n    case GET_REPO_README_FAILURE:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: action.error.response.statusText\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/shiv/healthera-portal/src/redux/githubSearch.js"],"names":["initialState","repos","isFetching","appTitle","readme","error","GET_USER_REPOS","GET_USER_REPOS_SUCCESS","GET_USER_REPOS_FAILURE","SELECT_PROJECT","GET_REPO_README","GET_REPO_README_SUCCESS","GET_REPO_README_FAILURE","requestUserRepos","user","types","payload","request","url","selectProject","project","type","requestReadme","headers","state","action","data","owner","login","response","statusText"],"mappings":"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","sourcesContent":["// Initial State\nconst initialState = {\n    repos: [],\n    isFetching: false,\n    appTitle: '',\n    readme: '',\n    error: null\n}\n\n// Action constants\nconst GET_USER_REPOS = 'GET_USER_REPOS'\nconst GET_USER_REPOS_SUCCESS = 'GET_USER_REPOS_SUCCESS'\nconst GET_USER_REPOS_FAILURE = 'GET_USER_REPOS_FAILURE'\nconst SELECT_PROJECT = 'SELECT_PROJECT'\nconst GET_REPO_README = 'GET_REPO_README'\nconst GET_REPO_README_SUCCESS = 'GET_REPO_README_SUCCESS'\nconst GET_REPO_README_FAILURE = 'GET_REPO_README_FAILURE'\n\n// Action creators\nexport const requestUserRepos = (user) => ({\n    types: [GET_USER_REPOS, GET_USER_REPOS_SUCCESS, GET_USER_REPOS_FAILURE],\n    payload: {\n        request: {\n            url: `/users/${user}/repos`\n        }\n    }\n})\nexport const selectProject = (project) => ({\n    type: SELECT_PROJECT,\n    payload: project\n})\n\nexport const requestReadme = (user, project) => {\n    return ({\n        types: [GET_REPO_README, GET_REPO_README_SUCCESS, GET_REPO_README_FAILURE],\n        payload: {\n            request: {\n                url: `/repos/${user}/${project}/readme`,\n                // Get README as HTML\n                headers:\n                {\n                    'Accept': 'application/vnd.github.VERSION.html'\n                }\n            }\n        }\n    })\n}\n\n// Reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_USER_REPOS:\n            return {\n                ...state,\n                isFetching: true,\n                repos: [],\n                error: null\n            };\n        case GET_USER_REPOS_SUCCESS:\n            return {\n                ...state,\n                repos: action.payload.data,\n                appTitle: action.payload.data[0] ? `${action.payload.data[0].owner.login}'s projects` : null,\n                isFetching: false\n            };\n        case GET_USER_REPOS_FAILURE:\n            return {\n                ...state,\n                error: action.error.response.statusText,\n                isFetching: false\n            };\n        case SELECT_PROJECT:\n            return {\n                ...state,\n                appTitle: action.payload\n            };\n        case GET_REPO_README:\n            return {\n                ...state,\n                isFetching: true,\n                readme: '',\n                error: null\n            };\n        case GET_REPO_README_SUCCESS:\n            return {\n                ...state,\n                isFetching: false,\n                readme: action.payload.data\n            };\n        case GET_REPO_README_FAILURE:\n            return {\n                ...state,\n                isFetching: false,\n                error: action.error.response.statusText\n            };\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}